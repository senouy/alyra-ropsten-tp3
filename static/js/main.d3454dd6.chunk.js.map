{"version":3,"sources":["constants.js","getWeb3.js","components/Header.js","components/WorkFlowStatus.js","components/Actions.js","components/WinningProposal.js","components/ListVoters.js","components/ListProposals.js","components/ListVotes.js","App.js","serviceWorker.js","index.js"],"names":["WORKFLOW_STATUS","USER_ROLE","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","Header","this","props","userRole","className","style","getRoleString","addr","id","React","Component","WorkFlowStatus","isOwner","CONSTANTS","worflowstatus","getStatusString","onClick","switchStatus","renderButtonSwitchStep","Actions","isVoter","type","addVoter","renderButtonAddVoter","addProposal","renderButtonAddProposal","placeholder","setVote","renderButtonSetVote","WinningProposal","state","winningProposalDescription","componentDidMount","contract","methods","getOneProposal","parseInt","winningProposalID","call","from","accounts","winningProposal","setState","description","renderProposalDescription","renderWinningProposal","ListVoters","listVoterAddress","length","map","address","index","returnValues","voterAddress","ListProposals","renderContent","listProposal","proposal","desc","renderContainer","ListVotes","listVote","vote","proposalId","voter","App","worflowStatus","owner","addresses","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","workflowStatus","option","fromBlock","toBlock","getPastEvents","listProposalID","getRole","all","proposalID","proposalString","push","forEach","error","addressNewVoter","document","getElementById","value","send","diplayErrorMessage","newProposal","newWorkFlowStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","classList","add","setTimeout","remove","userAddress","ownerAddress","message","innerHTML","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3454dd6.chunk.js","sourcesContent":["export const WORKFLOW_STATUS = {\n    REGISTERING_VOTERS : 0,\n    PROPOSAL_REGISTRATION_STARTED: 1,\n    PROPOSAL_REGISTRATION_ENDED: 2,\n    VOTING_SESSION_STARTED: 3,\n    VOTIN_SESSION_ENDED: 4,\n    VOTES_TALLIED: 5\n};\n\nexport const USER_ROLE = {\n    VISITOR: 1,\n    VOTER: 2,\n    OWNER: 3\n}","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\n\nexport default class Header extends React.Component {\n    getRoleString(){\n        switch(this.props.userRole){\n            case 1:\n                return \"Visiteur\";\n            case 2:\n                return \"Votant\";\n            case 3:\n                return \"Proprietaire du contrat\";\n            default:\n                return \"Role inconnu\";\n        }\n    }\n\n    render(){\n        return(\n            <header className=\"header\">\n                <h1>Voting Dapp</h1>\n            \n                    Mon role <span style={{'font-weight':'bold'}}>{this.getRoleString()} - {this.props.addr}</span>\n                \n                <div id=\"error-message\" className=\"hide\">\n                    Error\n                </div>\n            </header>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"./../constants\";\n\nexport default class WorkFlowStatus extends React.Component {\n\n    isOwner = false\n\n    constructor(props) {\n        super(props);\n        this.isOwner = props.userRole === CONSTANTS.USER_ROLE.OWNER;\n    }\n\n    getStatusString(){\n        switch(this.props.worflowstatus){\n            case CONSTANTS.WORKFLOW_STATUS.REGISTERING_VOTERS: \n                return 'Registering Voters';\n            case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED: \n                return 'Proposals Registration Started';\n            case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_ENDED: \n                return 'Proposals Registration Ended';\n            case CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED: \n                return 'Voting Session Started';\n            case CONSTANTS.WORKFLOW_STATUS.VOTIN_SESSION_ENDED: \n                return 'Voting Session Ended';\n            case CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED: \n                return 'Votes Tallied';\n            default: \n                return 'Unknown status';\n        }\n    }\n\n    render(){\n        //Display button to switch status only for the owner and if the voting process is not finished yet\n        const renderButtonSwitchStep = () => {\n            if (this.isOwner && this.props.worflowstatus !== CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED) {\n              return <div>\n                        <button onClick={this.props.switchStatus}>Passer à l'étape suivante</button>\n                    </div>;\n            } \n            return ;\n          }\n\n        return(\n            <div className=\"two-columns-container\">\n                <h3>Statut en cours <span id=\"workflow-status\">{this.getStatusString()}</span></h3>\n                {renderButtonSwitchStep()}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"../constants\";\n\nexport default class Actions extends React.Component {\n\n    isOwner = false\n    isVoter = false\n\n    constructor(props) {\n        super(props);\n        this.isOwner = props.userRole === CONSTANTS.USER_ROLE.OWNER;\n        this.isVoter = props.userRole === CONSTANTS.USER_ROLE.VOTER;\n    }\n\n    render(){\n        //Display button to add vote only for the owner and during REGISTERING_VOTERS status\n        const renderButtonAddVoter = () => {\n            if (this.isOwner && this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.REGISTERING_VOTERS) {\n              return <div>\n                        <input type=\"text\" id=\"address_new_voter_value\" />\n                        <button onClick={this.props.addVoter}>Ajouter un votant</button>\n                    </div>;\n            } \n            return;\n        }\n\n        //Display button to add proposal only for voter and during PROPOSAL_REGISTRATION_STARTED status\n        const renderButtonAddProposal = () => {\n            if (this.isVoter && this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED) {\n              return <div>\n                        <input type=\"text\" id=\"new_proposal_value\" />\n                        <button onClick={this.props.addProposal}>Ajouter une proposition</button>\n                    </div>;\n            } \n            return;\n        }\n\n        //Display button to set vote only for voter and during VOTING_SESSION_STARTED status\n        const renderButtonSetVote = () => {\n            if (this.isVoter && this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED) {\n              return <div>\n                        <input type=\"text\" id=\"set_vote_value\" placeholder=\"Saisir un identifiant de proposition\" />\n                        <button onClick={this.props.setVote}>Voter</button>\n                    </div>;\n            } \n            return;\n        }\n\n        return(\n            <div className=\"two-columns-container\">\n                <h3>Action</h3>\n                {renderButtonAddVoter()}\n                {renderButtonAddProposal()}\n                {renderButtonSetVote()}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"./../constants\";\n\nexport default class WinningProposal extends React.Component {\n    \n    state = { winningProposalDescription: null}\n    isVoter = false\n\n    constructor(props) {\n      super(props);\n      this.isVoter = props.userRole === CONSTANTS.USER_ROLE.VOTER;\n    }\n    \n    componentDidMount = async () => {\n        if(this.isVoter){\n            let winningProposal = await this.props.contract.methods.getOneProposal(parseInt(this.props.winningProposalID)).call({from: this.props.accounts[0]});\n            this.setState({winningProposalDescription : winningProposal.description});\n        }\n    }\n    \n    render(){\n        const renderWinningProposal = () => {\n          if (this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED) {\n            return <div>\n                      <h3>Proposition gagnante</h3>\n                      <p>\n                        Identifiant : {this.props.winningProposalID}\n                      </p>\n                      {renderProposalDescription()}\n                    </div>;\n          }\n        }\n\n        const renderProposalDescription = () => {\n            if (this.isVoter) {\n              return <div id=\"winning-proposal-description\">{this.state.winningProposalDescription}</div>;\n            } else {\n              return ;\n            }\n          }\n\n        return(\n            <div>\n              {renderWinningProposal()}\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nexport default class ListVoters extends React.Component {\n    \n    render(){\n      \n        const renderVoters = () => {\n          if (this.props.listVoterAddress.length > 0) {\n            return <div>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>N°</th>\n                            <th>Adresse</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {this.props.listVoterAddress.map( (address, index) => (\n                          <tr><td>{index+1}</td><td>{address.returnValues.voterAddress}</td></tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>;\n          }\n          else{\n            return \"Pas de votant enregistré\"\n          }\n        }\n\n        return(\n          <div className=\"three-columns-container\">\n            <h3>1. Liste des votants enregistrés</h3>\n            {renderVoters()}\n          </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"./../constants\";\n\nexport default class ListProposals extends React.Component {\n    \n    render(){\n        const renderContainer = () => {\n          if (this.props.worflowstatus >= CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED) {\n            return <div>\n                      <h3>2. Liste des propositions</h3>\n                      {renderContent()}\n                    </div>;\n          }\n          \n          return ;\n        }\n\n        const renderContent = () => {\n          if (this.props.listProposal.length > 0) {\n            return <table>\n                    <thead>\n                      <tr>\n                        <th>ID</th>\n                        <th>Description</th>\n                      </tr>\n                        </thead>\n                        <tbody>\n                          {this.props.listProposal.map( (proposal) => (\n                            <tr>\n                              <td>{proposal.id}</td>\n                              <td>{proposal.desc}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                    </table>;\n          }\n          else{\n            return \"Pas de proposition enregistrée\"\n          }\n        }\n\n        return(\n          <div className=\"three-columns-container\">\n            {renderContainer()}\n          </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"../constants\";\n\nexport default class ListVotes extends React.Component {\n    \n    render(){\n        const renderContainer = () => {\n          if (this.props.worflowstatus >= CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED) {\n            return <div>\n                      <h3>3. Liste des votes</h3>\n                      {renderContent()}\n                    </div>;\n          }\n          \n          return ;\n        }\n\n        const renderContent = () => {\n          if (this.props.listVote.length > 0) {\n            return <table>\n                    {this.props.listVote.map( (vote) => (\n                      <tr>\n                        <td>{vote.returnValues.proposalId}</td>\n                        <td>{vote.returnValues.voter}</td>\n                      </tr>\n                      ))}\n                  </table>;\n          }\n          else{\n            return \"Pas de vote enregistré\"\n          }\n        }\n\n        return(\n          <div className=\"three-columns-container\">\n            {renderContainer()}\n          </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport * as CONSTANTS from \"./constants\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Header from \"./components/Header.js\";\nimport WorkFlowStatus from \"./components/WorkFlowStatus.js\";\nimport Actions from \"./components/Actions.js\";\nimport WinningProposal from \"./components/WinningProposal\";\nimport ListVoters from \"./components/ListVoters\";\nimport ListProposals from \"./components/ListProposals\";\nimport ListVotes from \"./components/ListVotes\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { worflowStatus: 0, listVoterAddress: [], listProposal: [], listVote: [], owner: null, userRole: null,\n            winningProposalID: null, web3: null, accounts: null, contract: null, addresses: null};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      \n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const contract = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      let worflowStatus = await contract.methods.workflowStatus().call();\n      let winningProposalID = await contract.methods.winningProposalID().call();\n      let owner = await contract.methods.owner().call();\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listVoterAddress = await contract.getPastEvents('VoterRegistered', option);\n      const listProposalID = await contract.getPastEvents('ProposalRegistered', option);\n      const listVote = await contract.getPastEvents('Voted', option);\n      const userRole = this.getRole(accounts[0], owner, listVoterAddress);\n\n      let listProposal = [];\n      if(userRole === CONSTANTS.USER_ROLE.VOTER){\n        await Promise.all(listProposalID.map(async (proposalID) => {\n          let proposalString = await contract.methods.getOneProposal(parseInt(proposalID.returnValues.proposalId)).call({from: accounts[0]});\n          listProposal.push({id: proposalID.returnValues.proposalId, desc: proposalString.description});\n        }));\n      }\n      else{\n        listProposalID.forEach(proposalID => {\n          listProposal.push({id: proposalID.returnValues.proposalId, desc: 'xxx (only visible by voters)'});\n      });\n      }\n\n      this.setState({worflowStatus : parseInt(worflowStatus), winningProposalID, listVoterAddress, listProposal, listVote, \n                    owner,userRole, web3, accounts, contract});\n      \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  addVoter = async () => {\n    const {accounts, contract} = this.state;\n    const addressNewVoter = document.getElementById(\"address_new_voter_value\").value;\n\n    try {\n\n      await contract.methods.addVoter(addressNewVoter).send({from: accounts[0]});\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listVoterAddress = await contract.getPastEvents('VoterRegistered', option);\n\n      this.setState({listVoterAddress:listVoterAddress});\n\n      //clear input\n      document.getElementById(\"address_new_voter_value\").value = '';\n    } catch (error) {\n      this.diplayErrorMessage('Une erreur est survenue');\n      console.error(error);\n    }  \n  }\n\n  addProposal = async () => {\n    const {accounts, contract} = this.state;\n    const newProposal = document.getElementById(\"new_proposal_value\").value;\n\n    try {\n\n      await contract.methods.addProposal(newProposal).send({from: accounts[0]});\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listProposalID = await contract.getPastEvents('ProposalRegistered', option);\n\n      let listProposal = [];\n      if(this.state.userRole === CONSTANTS.USER_ROLE.VOTER){\n        await Promise.all(listProposalID.map(async (proposalID) => {\n          let proposalString = await contract.methods.getOneProposal(parseInt(proposalID.returnValues.proposalId)).call({from: accounts[0]});\n          listProposal.push({id: proposalID.returnValues.proposalId, desc: proposalString.description});\n        }));\n      }\n      else{\n        listProposalID.forEach(proposalID => {\n          listProposal.push({id: proposalID.returnValues.proposalId, desc: 'xxx (only visible by voters)'});\n      });\n      }\n\n      this.setState({listProposal:listProposal});\n\n      //clear input\n      document.getElementById(\"new_proposal_value\").value = '';\n    } catch (error) {\n      this.diplayErrorMessage('Une erreur est survenue');\n      console.error(error);\n    }  \n  }\n\n  setVote = async () => {\n    const {accounts, contract} = this.state;\n    const proposalID = parseInt(document.getElementById(\"set_vote_value\").value);\n\n    try {\n\n      await contract.methods.setVote(proposalID).send({from: accounts[0]});\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listVote = await contract.getPastEvents('Voted', option);\n\n      this.setState({listVote:listVote});\n\n      //clear input\n      document.getElementById(\"set_vote_value\").value = '';\n    } catch (error) {\n      this.diplayErrorMessage('Une erreur est survenue');\n      console.error(error);\n    }  \n  }\n\n  switchStatus = async () => {\n    const {accounts, contract} = this.state;\n    let newWorkFlowStatus = this.state.worflowStatus;\n\n    try {\n        switch(this.state.worflowStatus){\n        case CONSTANTS.WORKFLOW_STATUS.REGISTERING_VOTERS: \n            await contract.methods.startProposalsRegistering().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED;\n            break;\n        case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED: \n            await contract.methods.endProposalsRegistering().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_ENDED;\n            break;\n        case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_ENDED: \n            await contract.methods.startVotingSession().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED;\n            break;\n        case CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED: \n            await contract.methods.endVotingSession().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.VOTIN_SESSION_ENDED;\n            break; \n        case CONSTANTS.WORKFLOW_STATUS.VOTIN_SESSION_ENDED: \n            await contract.methods.tallyVotes().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED;\n\n            //After computing vote, get the winning proposal ID\n            let winningProposalID = await contract.methods.winningProposalID().call();\n            this.setState({winningProposalID});\n            break; \n        default: //display an error message;\n        }\n\n        document.getElementById(\"workflow-status\").classList.add('blink');\n        setTimeout(() => {\n          document.getElementById(\"workflow-status\").classList.remove('blink');\n        }, 3000);\n\n        this.setState({worflowStatus:newWorkFlowStatus});\n\n    } catch (error) {\n      this.diplayErrorMessage('Une erreur est survenue');\n      console.error(error);\n    }\n  }\n\n  getRole(userAddress, ownerAddress, listVoterAddress){\n        \n    if(userAddress === ownerAddress){\n        return CONSTANTS.USER_ROLE.OWNER;\n    }\n    else{\n        let isVoter = false;\n        listVoterAddress.forEach(address => {\n            if(userAddress === address.returnValues.voterAddress){\n              isVoter = true;\n            }\n        });\n        \n        return isVoter ? CONSTANTS.USER_ROLE.VOTER : CONSTANTS.USER_ROLE.VISITOR;\n    }\n  }\n\n  diplayErrorMessage(message){\n    document.getElementById(\"error-message\").innerHTML = message;\n    document.getElementById(\"error-message\").classList.remove('hide');\n\n    setTimeout(() => {\n      document.getElementById(\"error-message\").classList.add('hide');\n    }, 10000);\n  }\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Header addr={this.state.accounts} userRole={this.state.userRole} />\n        \n        <section className=\"main-container\">\n            <WorkFlowStatus  worflowstatus={this.state.worflowStatus} userRole={this.state.userRole}\n                            switchStatus={this.switchStatus} />\n          \n            <Actions  worflowstatus={this.state.worflowStatus} userRole={this.state.userRole}\n                      addVoter={this.addVoter} addProposal={this.addProposal} setVote={this.setVote} />\n          <div className=\"clearfix\"></div>\n        </section>\n        \n        <section className=\"main-container\">\n            \n\n            <ListVoters  listVoterAddress={this.state.listVoterAddress} />\n\n            <ListProposals  listProposal={this.state.listProposal} worflowstatus={this.state.worflowStatus}/>\n\n            <ListVotes  listVote={this.state.listVote} worflowstatus={this.state.worflowStatus}/>\n            <div className=\"clearfix\"></div>\n        </section>\n\n        <section className=\"main-container\">\n          \n          <WinningProposal winningProposalID={this.state.winningProposalID} userRole={this.state.userRole} \n                            worflowstatus={this.state.worflowStatus} contract={this.state.contract} accounts={this.state.accounts} />\n          <div className=\"clearfix\"></div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}