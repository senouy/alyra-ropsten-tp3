{"version":3,"sources":["constants.js","getWeb3.js","components/Header.js","components/WorkFlowStatus.js","components/Actions.js","components/WinningProposal.js","components/ListVoters.js","components/ListProposals.js","components/ListVotes.js","App.js","serviceWorker.js","index.js"],"names":["WORKFLOW_STATUS","USER_ROLE","TOAST_MESSAGE_TYPE","getWeb3","_app","Promise","resolve","reject","app","window","addEventListener","ethereum","web3","Web3","enable","on","location","reload","updateAccount","console","log","provider","providers","HttpProvider","Header","this","props","userRole","className","addr","style","fontWeight","getRoleString","id","React","Component","WorkFlowStatus","worflowstatus","CONSTANTS","isOwner","getStatusString","onClick","switchStatus","renderButtonSwitchStep","Actions","hasVoter","listVote","forEach","vote","accounts","returnValues","_voter","isVoter","type","addVoter","renderButtonAddVoter","addProposal","renderButtonAddProposal","hasVoted","placeholder","setVote","renderButtonSetVote","WinningProposal","state","winningProposalDescription","contract","methods","getOneProposal","parseInt","winningProposalID","call","from","then","result","setState","description","prevProps","renderProposalDescription","renderWinningProposal","ListVoters","listVoterAddress","length","map","address","index","_voterAddress","ListProposals","renderContent","listProposal","proposal","desc","renderContainer","ListVotes","_proposalId","App","worflowStatus","owner","addresses","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","workflowStatus","option","fromBlock","toBlock","getPastEvents","listProposalID","getRole","all","proposalID","proposalString","push","displayMessage","error","openMetamask","addressNewVoter","document","getElementById","value","send","newProposal","newWorkFlowStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","classList","add","setTimeout","remove","userAddress","ownerAddress","message","messageTypeClassName","innerHTML","removeAttribute","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09619b70.chunk.js","sourcesContent":["export const WORKFLOW_STATUS = {\n    REGISTERING_VOTERS : 0,\n    PROPOSAL_REGISTRATION_STARTED: 1,\n    PROPOSAL_REGISTRATION_ENDED: 2,\n    VOTING_SESSION_STARTED: 3,\n    VOTIN_SESSION_ENDED: 4,\n    VOTES_TALLIED: 5\n};\n\nexport const USER_ROLE = {\n    VISITOR: 1,\n    VOTER: 2,\n    OWNER: 3\n}\n\nexport const TOAST_MESSAGE_TYPE = {\n    SUCCESS: \"success-message\",\n    INFO: \"info-message\",\n    ERROR: \"error-message\"\n}","import Web3 from \"web3\";\n\nconst getWeb3 = (_app) =>\n  new Promise((resolve, reject) => {\n\n    let app = _app;\n    \n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            window.location.reload();\n          });\n          window.ethereum.on('accountsChanged',function(){\n            app.updateAccount();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\n\nexport default class Header extends React.Component {\n    getRoleString(){\n        switch(this.props.userRole){\n            case 1:\n                return \"Visiteur\";\n            case 2:\n                return \"Votant\";\n            case 3:\n                return \"Proprietaire du contrat\";\n            default:\n                return \"Role inconnu\";\n        }\n    }\n\n    render(){\n        const renderHeader = () => {\n            if (this.props.addr === null) {\n              return <div>\n                        <h1>Voting Dapp</h1>\n                    \n                        Veuillez connecter votre wallet    \n                    </div>;\n            } \n            return <div>\n                        <h1>Voting Dapp</h1>\n                    \n                            Mon role <span style={{fontWeight:'bold'}}>{this.getRoleString()} - {this.props.addr}</span>\n                        \n                        \n                    </div>;\n        }\n\n        return( <header className=\"header\">\n                    {renderHeader()}\n                    <div id=\"toast-message\" className=\"hide\">\n                        Error\n                    </div>\n                </header>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"./../constants\";\n\nexport default class WorkFlowStatus extends React.Component {\n\n    getStatusString(){\n        switch(this.props.worflowstatus){\n            case CONSTANTS.WORKFLOW_STATUS.REGISTERING_VOTERS: \n                return 'Registering Voters';\n            case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED: \n                return 'Proposals Registration Started';\n            case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_ENDED: \n                return 'Proposals Registration Ended';\n            case CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED: \n                return 'Voting Session Started';\n            case CONSTANTS.WORKFLOW_STATUS.VOTIN_SESSION_ENDED: \n                return 'Voting Session Ended';\n            case CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED: \n                return 'Votes Tallied';\n            default: \n                return 'Unknown status';\n        }\n    }\n\n    render(){\n        const isOwner = this.props.userRole === CONSTANTS.USER_ROLE.OWNER;\n        //Display button to switch status only for the owner and if the voting process is not finished yet\n        const renderButtonSwitchStep = () => {\n            if (isOwner && this.props.worflowstatus !== CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED) {\n              return <div>\n                        <button onClick={this.props.switchStatus}>Passer à l'étape suivante</button>\n                    </div>;\n            } \n            return ;\n          }\n\n        return(\n            <div className=\"two-columns-container\">\n                <h3>Statut en cours <span id=\"workflow-status\">{this.getStatusString()}</span></h3>\n                {renderButtonSwitchStep()}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"../constants\";\n\nexport default class Actions extends React.Component {\n\n    hasVoted(){\n        let hasVoter = false;\n\n        this.props.listVote.forEach(vote => {\n            if(this.props.accounts[0] === vote.returnValues._voter){\n              hasVoter = true;\n            }\n        });\n\n        return hasVoter;\n    }\n\n    render(){\n        const isOwner = this.props.userRole === CONSTANTS.USER_ROLE.OWNER;\n        const isVoter = this.props.userRole === CONSTANTS.USER_ROLE.VOTER;\n\n        //Display button to add vote only for the owner and during REGISTERING_VOTERS status\n        const renderButtonAddVoter = () => {\n            if (isOwner && this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.REGISTERING_VOTERS) {\n              return <div>\n                        <input type=\"text\" id=\"address_new_voter_value\" />\n                        <button onClick={this.props.addVoter}>Ajouter un votant</button>\n                    </div>;\n            } \n            return;\n        }\n\n        //Display button to add proposal only for voter and during PROPOSAL_REGISTRATION_STARTED status\n        const renderButtonAddProposal = () => {\n            if (isVoter && this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED) {\n              return <div>\n                        <input type=\"text\" id=\"new_proposal_value\" />\n                        <button onClick={this.props.addProposal}>Ajouter une proposition</button>\n                    </div>;\n            } \n            return;\n        }\n\n        //Display button to set vote only for voter and during VOTING_SESSION_STARTED status\n        const renderButtonSetVote = () => {\n            if (isVoter && this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED) {\n                if(this.hasVoted()){\n                    return <em>Vous avez déjà voté</em>\n                }\n                else {\n                    return <div>\n                        <input type=\"text\" id=\"set_vote_value\" placeholder=\"Saisir un identifiant de proposition\" />\n                        <button onClick={this.props.setVote}>Voter</button>\n                    </div>;\n                }\n              \n            } \n            return;\n        }\n\n        return(\n            <div className=\"two-columns-container\">\n                <h3>Action</h3>\n                {renderButtonAddVoter()}\n                {renderButtonAddProposal()}\n                {renderButtonSetVote()}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"./../constants\";\n\nexport default class WinningProposal extends React.Component {\n    \n    state = {winningProposalDescription: null};\n\n    componentDidMount(){\n      const isVoter = this.props.userRole === CONSTANTS.USER_ROLE.VOTER;\n\n      if(isVoter){\n        this.props.contract.methods.getOneProposal(parseInt(this.props.winningProposalID)).call({from: this.props.accounts[0]}).then(\n          (result) => {\n            this.setState({winningProposalDescription : result.description});\n          }\n          );\n        \n      }\n    }\n\n    componentDidUpdate(prevProps){\n      if(prevProps.userRole !==  this.props.userRole){\n        const isVoter = this.props.userRole === CONSTANTS.USER_ROLE.VOTER;\n        \n        if(isVoter){\n          this.props.contract.methods.getOneProposal(parseInt(this.props.winningProposalID)).call({from: this.props.accounts[0]}).then(\n            (result) => {\n              this.setState({winningProposalDescription : result.description});\n            }\n            );\n        }\n      }\n    } \n\n    render(){\n        const renderWinningProposal = () => {\n          if (this.props.worflowstatus === CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED) {\n            return <div>\n                      <h3>Proposition gagnante</h3>\n                      <p>\n                        Identifiant : {this.props.winningProposalID}\n                      </p>\n                      {renderProposalDescription()}\n                    </div>;\n          }\n        }\n\n        const renderProposalDescription = () => {\n            const isVoter = this.props.userRole === CONSTANTS.USER_ROLE.VOTER;\n\n            if (isVoter) {\n              return <div id=\"winning-proposal-description\">{this.state.winningProposalDescription}</div>;\n            } else {\n              return ;\n            }\n          }\n\n        return(\n            <div>\n              {renderWinningProposal()}\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nexport default class ListVoters extends React.Component {\n    \n    render(){\n      \n        const renderVoters = () => {\n          if (this.props.listVoterAddress.length > 0) {\n            return <div>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>N°</th>\n                            <th>Adresse</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {this.props.listVoterAddress.map( (address, index) => (\n                          <tr><td>{index+1}</td><td>{address.returnValues._voterAddress}</td></tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>;\n          }\n          else{\n            return <em>Pas de votant enregistré</em>\n          }\n        }\n\n        return(\n          <div className=\"three-columns-container\">\n            <h3>1. Liste des votants enregistrés</h3>\n            {renderVoters()}\n          </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"./../constants\";\n\nexport default class ListProposals extends React.Component {\n    \n    render(){\n        const renderContainer = () => {\n          if (this.props.worflowstatus >= CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED) {\n            return <div>\n                      <h3>2. Liste des propositions</h3>\n                      {renderContent()}\n                    </div>;\n          }\n          \n          return ;\n        }\n\n        const renderContent = () => {\n          if (this.props.listProposal.length > 0) {\n            return <table>\n                    <thead>\n                      <tr>\n                        <th>ID</th>\n                        <th>Description</th>\n                      </tr>\n                        </thead>\n                        <tbody>\n                          {this.props.listProposal.map( (proposal) => (\n                            <tr>\n                              <td>{proposal.id}</td>\n                              <td>{proposal.desc}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                    </table>;\n          }\n          else{\n            return <em>Pas de proposition enregistrée</em>\n          }\n        }\n\n        return(\n          <div className=\"three-columns-container\">\n            {renderContainer()}\n          </div>\n        )\n    }\n}","import React from \"react\";\nimport * as CONSTANTS from \"../constants\";\n\nexport default class ListVotes extends React.Component {\n    \n    render(){\n        const renderContainer = () => {\n          if (this.props.worflowstatus >= CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED) {\n            return <div>\n                      <h3>3. Liste des votes</h3>\n                      {renderContent()}\n                    </div>;\n          }\n          \n          return ;\n        }\n\n        const renderContent = () => {\n          if (this.props.listVote.length > 0) {\n            return <table>\n                      <thead>\n                          <tr>\n                            <th>ID Prop</th>\n                            <th>Adresse</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                        {this.props.listVote.map( (vote) => (\n                          <tr>\n                            <td>{vote.returnValues._proposalId}</td>\n                            <td>{vote.returnValues._voter}</td>\n                          </tr>\n                          ))}\n                        </tbody>\n                  </table>;\n          }\n          else{\n            return <em>Pas de vote enregistré</em>\n          }\n        }\n\n        return(\n          <div className=\"three-columns-container\">\n            {renderContainer()}\n          </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport * as CONSTANTS from \"./constants\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Header from \"./components/Header.js\";\nimport WorkFlowStatus from \"./components/WorkFlowStatus.js\";\nimport Actions from \"./components/Actions.js\";\nimport WinningProposal from \"./components/WinningProposal\";\nimport ListVoters from \"./components/ListVoters\";\nimport ListProposals from \"./components/ListProposals\";\nimport ListVotes from \"./components/ListVotes\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { worflowStatus: 0, listVoterAddress: [], listProposal: [], listVote: [], owner: null, userRole: null,\n            winningProposalID: null, web3: null, accounts: null, contract: null, addresses: null};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(this);\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const contract = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      let worflowStatus = await contract.methods.workflowStatus().call();\n      let winningProposalID = await contract.methods.winningProposalID().call();\n      let owner = await contract.methods.owner().call();\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listVoterAddress = await contract.getPastEvents('VoterRegistered', option);\n      const listProposalID = await contract.getPastEvents('ProposalRegistered', option);\n      const listVote = await contract.getPastEvents('Voted', option);\n      const userRole = this.getRole(accounts[0], owner, listVoterAddress);\n\n      let listProposal = [];\n      if(userRole === CONSTANTS.USER_ROLE.VOTER){\n        await Promise.all(listProposalID.map(async (proposalID) => {\n          let proposalString = await contract.methods.getOneProposal(parseInt(proposalID.returnValues._proposalId)).call({from: accounts[0]});\n          listProposal.push({id: proposalID.returnValues._proposalId, desc: proposalString.description});\n        }));\n      }\n      else{\n        listProposalID.forEach(proposalID => {\n          listProposal.push({id: proposalID.returnValues._proposalId, desc: 'xxx (only visible by voters)'});\n      });\n      }\n\n      this.setState({worflowStatus : parseInt(worflowStatus), winningProposalID, listVoterAddress, listProposal, listVote, \n                    owner,userRole, web3, accounts, contract});\n      \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      this.displayMessage(\n        `Failed to load web3, accounts, or contract. Check console for details.`, CONSTANTS.TOAST_MESSAGE_TYPE.ERROR\n      );\n      console.error(error);\n      this.openMetamask();\n    }\n  };\n\n  updateAccount = async () => {\n    const accounts = await this.state.web3.eth.getAccounts();\n    const userRole = this.getRole(accounts[0], this.state.owner, this.state.listVoterAddress);\n    \n    this.setState({accounts, userRole});\n    this.displayMessage(\"Votre compte metamask a été mis à jour\", CONSTANTS.TOAST_MESSAGE_TYPE.INFO); \n  }\n\n  addVoter = async () => {\n    const {accounts, contract} = this.state;\n    const addressNewVoter = document.getElementById(\"address_new_voter_value\").value;\n\n    try {\n\n      await contract.methods.addVoter(addressNewVoter).send({from: accounts[0]});\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listVoterAddress = await contract.getPastEvents('VoterRegistered', option);\n\n      this.setState({listVoterAddress:listVoterAddress});\n\n      //clear input\n      document.getElementById(\"address_new_voter_value\").value = '';\n    } catch (error) {\n      this.displayMessage('Une erreur est survenue', CONSTANTS.TOAST_MESSAGE_TYPE.ERROR);\n      console.error(error);\n    }  \n  }\n\n  addProposal = async () => {\n    const {accounts, contract} = this.state;\n    const newProposal = document.getElementById(\"new_proposal_value\").value;\n\n    try {\n\n      await contract.methods.addProposal(newProposal).send({from: accounts[0]});\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listProposalID = await contract.getPastEvents('ProposalRegistered', option);\n\n      let listProposal = [];\n      if(this.state.userRole === CONSTANTS.USER_ROLE.VOTER){\n        await Promise.all(listProposalID.map(async (proposalID) => {\n          let proposalString = await contract.methods.getOneProposal(parseInt(proposalID.returnValues._proposalId)).call({from: accounts[0]});\n          listProposal.push({id: proposalID.returnValues._proposalId, desc: proposalString.description});\n        }));\n      }\n      else{\n        listProposalID.forEach(proposalID => {\n          listProposal.push({id: proposalID.returnValues._proposalId, desc: 'xxx (only visible by voters)'});\n      });\n      }\n\n      this.setState({listProposal:listProposal});\n\n      //clear input\n      document.getElementById(\"new_proposal_value\").value = '';\n    } catch (error) {\n      this.displayMessage('Une erreur est survenue', CONSTANTS.TOAST_MESSAGE_TYPE.ERROR);\n      console.error(error);\n    }  \n  }\n\n  setVote = async () => {\n    const {accounts, contract} = this.state;\n    const proposalID = parseInt(document.getElementById(\"set_vote_value\").value);\n\n    try {\n\n      await contract.methods.setVote(proposalID).send({from: accounts[0]});\n\n      let option = {\n        fromBlock:0,\n        toBlock: 'latest'\n      }\n      const listVote = await contract.getPastEvents('Voted', option);\n\n      this.setState({listVote:listVote});\n    } catch (error) {\n      this.displayMessage('Une erreur est survenue', CONSTANTS.TOAST_MESSAGE_TYPE.ERROR);\n      console.error(error);\n    }  \n  }\n\n  switchStatus = async () => {\n    const {accounts, contract} = this.state;\n    let newWorkFlowStatus = this.state.worflowStatus;\n\n    try {\n        switch(this.state.worflowStatus){\n        case CONSTANTS.WORKFLOW_STATUS.REGISTERING_VOTERS: \n            await contract.methods.startProposalsRegistering().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED;\n            break;\n        case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_STARTED: \n            await contract.methods.endProposalsRegistering().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_ENDED;\n            break;\n        case CONSTANTS.WORKFLOW_STATUS.PROPOSAL_REGISTRATION_ENDED: \n            await contract.methods.startVotingSession().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED;\n            break;\n        case CONSTANTS.WORKFLOW_STATUS.VOTING_SESSION_STARTED: \n            await contract.methods.endVotingSession().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.VOTIN_SESSION_ENDED;\n            break; \n        case CONSTANTS.WORKFLOW_STATUS.VOTIN_SESSION_ENDED: \n            await contract.methods.tallyVotes().send({from: accounts[0]});\n            newWorkFlowStatus = CONSTANTS.WORKFLOW_STATUS.VOTES_TALLIED;\n\n            //After computing vote, get the winning proposal ID\n            let winningProposalID = await contract.methods.winningProposalID().call();\n            this.setState({winningProposalID});\n            break; \n        default: //display an error message;\n        }\n\n        document.getElementById(\"workflow-status\").classList.add('blink');\n        setTimeout(() => {\n          document.getElementById(\"workflow-status\").classList.remove('blink');\n        }, 7000);\n\n        setTimeout(() => {\n          this.setState({worflowStatus:newWorkFlowStatus});\n        }, 2500);\n        \n\n    } catch (error) {\n      this.displayMessage('Une erreur est survenue', CONSTANTS.TOAST_MESSAGE_TYPE.ERROR);\n      console.error(error);\n    }\n  }\n\n  getRole(userAddress, ownerAddress, listVoterAddress){\n        \n    if(userAddress === ownerAddress){\n        return CONSTANTS.USER_ROLE.OWNER;\n    }\n    else{\n        let isVoter = false;\n        listVoterAddress.forEach(address => {\n            if(userAddress === address.returnValues._voterAddress){\n              isVoter = true;\n            }\n        });\n        \n        return isVoter ? CONSTANTS.USER_ROLE.VOTER : CONSTANTS.USER_ROLE.VISITOR;\n    }\n  }\n\n  displayMessage(message, messageTypeClassName){\n    document.getElementById(\"toast-message\").innerHTML = message;\n    document.getElementById(\"toast-message\").removeAttribute('class');\n    document.getElementById(\"toast-message\").classList.add(messageTypeClassName);\n\n    setTimeout(() => {\n      document.getElementById(\"toast-message\").classList.add('hide');\n    }, 10000);\n  }\n\n\n  render() {\n    if (!this.state.web3) {\n      return  <div className=\"App\">\n                <Header addr={this.state.accounts} userRole={this.state.userRole} />\n              </div>\n    }\n    return (\n      <div className=\"App\">\n        <Header addr={this.state.accounts} userRole={this.state.userRole} />\n        \n        <section className=\"main-container\">\n            <WorkFlowStatus  worflowstatus={this.state.worflowStatus} userRole={this.state.userRole}\n                            switchStatus={this.switchStatus} />\n          \n            <Actions  worflowstatus={this.state.worflowStatus} userRole={this.state.userRole} listVote={this.state.listVote}\n                      addVoter={this.addVoter} addProposal={this.addProposal} setVote={this.setVote} accounts={this.state.accounts} />\n          <div className=\"clearfix\"></div>\n        </section>\n        \n        <section className=\"main-container\">\n            \n\n            <ListVoters  listVoterAddress={this.state.listVoterAddress} />\n\n            <ListProposals  listProposal={this.state.listProposal} worflowstatus={this.state.worflowStatus}/>\n\n            <ListVotes  listVote={this.state.listVote} worflowstatus={this.state.worflowStatus}/>\n            <div className=\"clearfix\"></div>\n        </section>\n\n        <section className=\"main-container\">\n          \n          <WinningProposal winningProposalID={this.state.winningProposalID} userRole={this.state.userRole} \n                            worflowstatus={this.state.worflowStatus} contract={this.state.contract} accounts={this.state.accounts} />\n          <div className=\"clearfix\"></div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}